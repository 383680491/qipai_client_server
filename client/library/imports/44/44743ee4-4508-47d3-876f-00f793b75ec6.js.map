{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\scripts\\3rdparty/assets\\scripts\\3rdparty\\sha1.js"],"names":["hexcase","b64pad","chrsz","hex_sha1","s","binb2hex","core_sha1","str2binb","length","b64_sha1","binb2b64","str_sha1","binb2str","hex_hmac_sha1","key","data","core_hmac_sha1","b64_hmac_sha1","str_hmac_sha1","sha1_vm_test","x","len","w","Array","a","b","c","d","e","i","olda","oldb","oldc","oldd","olde","j","rol","t","safe_add","sha1_ft","sha1_kt","bkey","ipad","opad","hash","concat","y","lsw","msw","num","cnt","str","bin","mask","charCodeAt","String","fromCharCode","binarray","hex_tab","charAt","tab","triplet","module","exports"],"mappings":"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","file":"sha1.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\scripts\\3rdparty","sourcesContent":["/* \r\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined \r\n * in FIPS PUB 180-1 \r\n * Version 2.1-BETA Copyright Paul Johnston 2000 - 2002. \r\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet \r\n * Distributed under the BSD License \r\n * See http://pajhome.org.uk/crypt/md5 for details. \r\n */\r\n/* \r\n * Configurable variables. You may need to tweak these to be compatible with \r\n * the server-side, but the defaults work in most cases. \r\n */\r\nvar hexcase = 0; /* hex output format. 0 - lowercase; 1 - uppercase     */\r\nvar b64pad = \"\"; /* base-64 pad character. \"=\" for strict RFC compliance  */\r\nvar chrsz = 8; /* bits per input character. 8 - ASCII; 16 - Unicode    */\r\n/* \r\n * These are the functions you'll usually want to call \r\n * They take string arguments and return either hex or base-64 encoded strings \r\n */\r\nfunction hex_sha1(s) { \r\n return binb2hex(core_sha1(str2binb(s), s.length * chrsz)); \r\n} \r\nfunction b64_sha1(s) { \r\n return binb2b64(core_sha1(str2binb(s), s.length * chrsz)); \r\n} \r\nfunction str_sha1(s) { \r\n return binb2str(core_sha1(str2binb(s), s.length * chrsz)); \r\n} \r\nfunction hex_hmac_sha1(key, data) { \r\n return binb2hex(core_hmac_sha1(key, data)); \r\n} \r\nfunction b64_hmac_sha1(key, data) { \r\n return binb2b64(core_hmac_sha1(key, data)); \r\n} \r\nfunction str_hmac_sha1(key, data) { \r\n return binb2str(core_hmac_sha1(key, data)); \r\n} \r\n/* \r\n * Perform a simple self-test to see if the VM is working \r\n */\r\nfunction sha1_vm_test() { \r\n return hex_sha1(\"abc\") == \"a9993e364706816aba3e25717850c26c9cd0d89d\"; \r\n} \r\n/* \r\n * Calculate the SHA-1 of an array of big-endian words, and a bit length \r\n */\r\nfunction core_sha1(x, len) { \r\n /* append padding */\r\n x[len >> 5] |= 0x80 << (24 - len % 32); \r\n x[((len + 64 >> 9) << 4) + 15] = len; \r\n var w = Array(80); \r\n var a = 1732584193; \r\n var b = -271733879; \r\n var c = -1732584194; \r\n var d = 271733878; \r\n var e = -1009589776; \r\n for (var i = 0; i < x.length; i += 16) { \r\n  var olda = a; \r\n  var oldb = b; \r\n  var oldc = c; \r\n  var oldd = d; \r\n  var olde = e; \r\n  for (var j = 0; j < 80; j++) { \r\n   if (j < 16) w[j] = x[i + j]; \r\n   else w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1); \r\n   var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j))); \r\n   e = d; \r\n   d = c; \r\n   c = rol(b, 30); \r\n   b = a; \r\n   a = t; \r\n  } \r\n  a = safe_add(a, olda); \r\n  b = safe_add(b, oldb); \r\n  c = safe_add(c, oldc); \r\n  d = safe_add(d, oldd); \r\n  e = safe_add(e, olde); \r\n } \r\n return Array(a, b, c, d, e); \r\n} \r\n/* \r\n * Perform the appropriate triplet combination function for the current \r\n * iteration \r\n */\r\nfunction sha1_ft(t, b, c, d) { \r\n if (t < 20) return (b & c) | ((~b) & d); \r\n if (t < 40) return b ^ c ^ d; \r\n if (t < 60) return (b & c) | (b & d) | (c & d); \r\n return b ^ c ^ d; \r\n} \r\n/* \r\n * Determine the appropriate additive constant for the current iteration \r\n */\r\nfunction sha1_kt(t) { \r\n return (t < 20) ? 1518500249 : (t < 40) ? 1859775393 : (t < 60) ? -1894007588 : -899497514; \r\n} \r\n/* \r\n * Calculate the HMAC-SHA1 of a key and some data \r\n */\r\nfunction core_hmac_sha1(key, data) { \r\n var bkey = str2binb(key); \r\n if (bkey.length > 16) bkey = core_sha1(bkey, key.length * chrsz); \r\n var ipad = Array(16), \r\n  opad = Array(16); \r\n for (var i = 0; i < 16; i++) { \r\n  ipad[i] = bkey[i] ^ 0x36363636; \r\n  opad[i] = bkey[i] ^ 0x5C5C5C5C; \r\n } \r\n var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * chrsz); \r\n return core_sha1(opad.concat(hash), 512 + 160); \r\n} \r\n/* \r\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally \r\n * to work around bugs in some JS interpreters. \r\n */\r\nfunction safe_add(x, y) { \r\n var lsw = (x & 0xFFFF) + (y & 0xFFFF); \r\n var msw = (x >> 16) + (y >> 16) + (lsw >> 16); \r\n return (msw << 16) | (lsw & 0xFFFF); \r\n} \r\n/* \r\n * Bitwise rotate a 32-bit number to the left. \r\n */\r\nfunction rol(num, cnt) { \r\n return (num << cnt) | (num >>> (32 - cnt)); \r\n} \r\n/* \r\n * Convert an 8-bit or 16-bit string to an array of big-endian words \r\n * In 8-bit function, characters >255 have their hi-byte silently ignored. \r\n */\r\nfunction str2binb(str) { \r\n var bin = Array(); \r\n var mask = (1 << chrsz) - 1; \r\n for (var i = 0; i < str.length * chrsz; i += chrsz) \r\n bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - i % 32); \r\n return bin; \r\n} \r\n/* \r\n * Convert an array of big-endian words to a string \r\n */\r\nfunction binb2str(bin) { \r\n var str = \"\"; \r\n var mask = (1 << chrsz) - 1; \r\n for (var i = 0; i < bin.length * 32; i += chrsz) \r\n str += String.fromCharCode((bin[i >> 5] >>> (24 - i % 32)) & mask); \r\n return str; \r\n} \r\n/* \r\n * Convert an array of big-endian words to a hex string. \r\n */\r\nfunction binb2hex(binarray) { \r\n var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\"; \r\n var str = \"\"; \r\n for (var i = 0; i < binarray.length * 4; i++) { \r\n  str += hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8 + 4)) & 0xF) + hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8)) & 0xF); \r\n } \r\n return str; \r\n} \r\n/* \r\n * Convert an array of big-endian words to a base-64 string \r\n */\r\nfunction binb2b64(binarray) { \r\n var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"; \r\n var str = \"\"; \r\n for (var i = 0; i < binarray.length * 4; i += 3) { \r\n  var triplet = (((binarray[i >> 2] >> 8 * (3 - i % 4)) & 0xFF) << 16) | (((binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4)) & 0xFF) << 8) | ((binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4)) & 0xFF); \r\n  for (var j = 0; j < 4; j++) { \r\n   if (i * 8 + j * 6 > binarray.length * 32) str += b64pad; \r\n   else str += tab.charAt((triplet >> 6 * (3 - j)) & 0x3F); \r\n  } \r\n } \r\n return str; \r\n}\r\n\r\nmodule.exports = hex_sha1;"]}